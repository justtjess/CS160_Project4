c0 {
    integer m0
    boolean m1
    boolean m2
    boolean m3
    f0(a0 : boolean, a1 : boolean, a2 : boolean) -> boolean {
        integer l0, l1, l2, l3, l4
        integer l5
        integer l6, l7, l8, l9
        boolean l10, l11, l12, l13, l14
        l13 = l14
        return true
        }
    }
c1 {
    c0 m0
    c0 m1
    c0 m2
    c0 m3
    }
c2 {
    integer m0
    c1 m1
    c1 m2
    c0 m3
    c1 m4
    f0(a0 : c1) -> c0 {
        c0 l0, l1, l2, l3
        integer l4, l5, l6, l7, l8
        print new c0 ( true - new c1, true ) 
        l3.f0(l5, (l5), f0((l4)))
        return new c1 ( l5 )  or true
        }
    }
c3 extends c2 {
    c0 m0
    c1 m1
    c0 m2
    c0 m3
    c1 m4
    c1 m5
    boolean m6
    f0() -> c2 {
        c2 l0, l1, l2
        l2.m1 = not new c1
        if f0(new c1 ( f0(l0.m0, l2.f0(false)) ) , 89, l2.m1) {
            l2.f0(true / true)
            l1.f0(new c2 and false)
            l2.m1 = new c2
            l1.m4 = 162
            while true {
                l0.f0(false)
                f0(new c0 ( false, new c0 ( true, true, l0.m3 )  ) )
                }
            
            }
        
        print new c1
        f0(new c0 or true)
        l0.f0(l2.m0, f0(false), false)
        return true
        }
    f1(a0 : c2) -> c0 {
        print f1(16, 180)
        print not f0(new c1 ( 119 ) )
        return -f0((new c2 ( new c2 ( new c0, new c2 ( true, new c2 )  )  ) ))
        }
    f2(a0 : c1) -> c2 {
        c1 l0, l1, l2, l3
        c2 l4, l5, l6, l7, l8, l9, l10, l11
        integer l12, l13, l14
        return new c1 ( l5.m1 ) 
        }
    }
